//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/RuneDetection/DrawingAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @DrawingAction: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @DrawingAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""DrawingAction"",
    ""maps"": [
        {
            ""name"": ""DrawingMap"",
            ""id"": ""c478f9f3-a8d5-460a-adb5-89beb479a994"",
            ""actions"": [
                {
                    ""name"": ""Draw"",
                    ""type"": ""Button"",
                    ""id"": ""118c9ef3-f22f-40b3-938d-8af475edd903"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ee931497-82e0-4def-bb5a-3db56f5b5362"",
                    ""path"": ""<Pen>/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Draw"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""49591d21-a3f0-468d-8fdb-fca4ce633d3c"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Draw"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // DrawingMap
        m_DrawingMap = asset.FindActionMap("DrawingMap", throwIfNotFound: true);
        m_DrawingMap_Draw = m_DrawingMap.FindAction("Draw", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // DrawingMap
    private readonly InputActionMap m_DrawingMap;
    private List<IDrawingMapActions> m_DrawingMapActionsCallbackInterfaces = new List<IDrawingMapActions>();
    private readonly InputAction m_DrawingMap_Draw;
    public struct DrawingMapActions
    {
        private @DrawingAction m_Wrapper;
        public DrawingMapActions(@DrawingAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Draw => m_Wrapper.m_DrawingMap_Draw;
        public InputActionMap Get() { return m_Wrapper.m_DrawingMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DrawingMapActions set) { return set.Get(); }
        public void AddCallbacks(IDrawingMapActions instance)
        {
            if (instance == null || m_Wrapper.m_DrawingMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DrawingMapActionsCallbackInterfaces.Add(instance);
            @Draw.started += instance.OnDraw;
            @Draw.performed += instance.OnDraw;
            @Draw.canceled += instance.OnDraw;
        }

        private void UnregisterCallbacks(IDrawingMapActions instance)
        {
            @Draw.started -= instance.OnDraw;
            @Draw.performed -= instance.OnDraw;
            @Draw.canceled -= instance.OnDraw;
        }

        public void RemoveCallbacks(IDrawingMapActions instance)
        {
            if (m_Wrapper.m_DrawingMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDrawingMapActions instance)
        {
            foreach (var item in m_Wrapper.m_DrawingMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DrawingMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DrawingMapActions @DrawingMap => new DrawingMapActions(this);
    public interface IDrawingMapActions
    {
        void OnDraw(InputAction.CallbackContext context);
    }
}
